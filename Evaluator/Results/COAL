[
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests$A: java.lang.String get()\u003e",
    "value": "ANULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint: java.util.List getExpectedResults()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint: java.util.List getExpectedResults()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests$B: java.lang.String get()\u003e",
    "value": "BNULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish$BlowfishCBC: long decryptBlockCBC(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish$BlowfishCBC: long encryptBlockCBC(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish$BlowfishCBC: long getCBCIV()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldDepthTests: java.lang.String testFoo()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TypeTests: java.lang.String doSth()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*) "
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blake2s: java.lang.String testBlake()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blake2s: byte[] digest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blake2s: byte[] digest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testBufferedOutputStream()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testBufferedOutputStreamSimple()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testBufferedReader()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testCharArrayReader()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testCombined()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testCombinedField()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream()\u003e",
    "value": "(.*)_(.*)_(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream3()\u003e",
    "value": "a(.*)1"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream3()\u003e",
    "value": "b(.*)1"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream3()\u003e",
    "value": "a(.*)2"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream3()\u003e",
    "value": "b(.*)2"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream4()\u003e",
    "value": "a(.*)1"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream4()\u003e",
    "value": "b(.*)1"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream4()\u003e",
    "value": "a(.*)2"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream4()\u003e",
    "value": "b(.*)2"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream5()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testInputStream6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testOutputStream()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testOutputStream2()\u003e",
    "value": "(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testOutputStream3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testOutputStream4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testPrintStream()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testPrintStream2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testPrintWriter()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testPrintWriter2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testPrintWriter3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testStringReader()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testStringWriter()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testStringWriter2()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StreamTests: java.lang.String testStringWriter3()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e: de.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e[] $values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e: de.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e valueOf(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e: de.fraunhofer.sit.sse.valbench.modellingtests.ClassTests$e[] values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String callTestWithException()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String callTestWithException()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String callee1()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.RuntimeException callee2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String complexTest()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String complexTest()\u003e",
    "value": "(.*)(.*), (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String complexTest()\u003e",
    "value": "(.*), (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String doubleTest()\u003e",
    "value": "(.*): (.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String findLoop()\u003e",
    "value": "http://abc"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String findLoop()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String findLoop()\u003e",
    "value": "http://abc(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String formatTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String formatTest2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String formatTest3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String lookupSwitch()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: float pow(float,float)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: float pow(float,float)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleBase()\u003e",
    "value": "(.*);(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTest()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTest()\u003e",
    "value": "Start-"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTest2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTest3()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTestDouble()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTestDouble()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTestDouble()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleLoopTestInstanceField()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleMethodInvocation()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleMethodInvocation()\u003e",
    "value": "(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleMethodInvocation()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleTestNewArrayAndReturn()\u003e",
    "value": "a"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleTestNewArrayAndReturn()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simpleTestNewArrayAndReturn()\u003e",
    "value": "a(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simplestCallTest2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simplestCallTest3()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simplestCallTest3()\u003e",
    "value": "a"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String simplestCallTest3()\u003e",
    "value": "(.*)a"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String skippedLoopIf()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String skippedLoopSwitch()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String stringbuilderInsanity()\u003e",
    "value": "s1|s2|s3|s4"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.LoopTests: java.lang.String testFields()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MergeTests: java.lang.String testStringBuilders()\u003e",
    "value": "f(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: de.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Null create(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testEquals()\u003e",
    "value": "(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testHashCode()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testOrderedSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testOrderedSet2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testOrderedSet3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests: java.lang.String testSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PullParserTest: java.lang.String testSimple()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PullParserTest: java.lang.String testSimple2()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PullParserTest: java.lang.String testSimple3()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum: de.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum[] $values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum: de.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum valueOf(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum: de.fraunhofer.sit.sse.valbench.modellingtests.JSONTests$Enum[] values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$B: java.lang.String get()\u003e",
    "value": "BNULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: de.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$Foo getImpl()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: de.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$Base getReflection(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String test6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String testDefaultMethod()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String testReflection7()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String testReflection8()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests: java.lang.String testSimple()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$A: java.lang.String get()\u003e",
    "value": "ANULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String findStaticFields()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testCast()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses1()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses1()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses1()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses13()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses2()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses2()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses4()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses4()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses4()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses5()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses5()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses5()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses6()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses6()\u003e",
    "value": "(.*) -\u003e (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses6()\u003e",
    "value": "(.*)(.*) -\u003e (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses7()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses7()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses7()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses8()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses8()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses8()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses9()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses9()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClasses9()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass2()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass2()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass5()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClass6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testClassesGetClassGetResource3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testIsInstance()\u003e",
    "value": "(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages2()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String testPackages2()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ClassTests: java.lang.String toArrayType(java.lang.Object)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testChomp()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testChop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testContains()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testFooB()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testFooD()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testFooE()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testReplace()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testmath()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testmath2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testmath3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringUtilsTests: java.lang.String testmath4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory$1: java.lang.Object read(com.google.gson.stream.JsonReader)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MutableObjectsTests: java.lang.String test()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.UUIDTests: java.lang.String testUUID()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$1: int compare(java.lang.Object,java.lang.Object)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$1: int compare(de.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Null,de.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Null)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidReflection: java.lang.String testReflectionModelFieldAccessGet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$b: java.lang.CharSequence getString()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String mapTest()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMap()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps4()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps4()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MapTests: java.lang.String testMaps4()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.SharedPrefsTests: java.lang.String testDefaultValue()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.SharedPrefsTests: java.lang.String testPut()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArrayTests: long[] getArray()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArrayTests: java.lang.String test1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArrayTests: java.lang.String testArrayCopy()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArrayTests: java.lang.String testGetConstantElementLoop()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testArrayCopy()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOf1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOf2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOf3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOf4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOfSpecial1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ArrayCopyOfTests: java.lang.String testCopyOfSpecial2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests$ObjHolder: java.lang.String toString()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo[] $values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo valueOf(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.AnnotationTests$Foo[] values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: int foo(int,de.fraunhofer.sit.sse.valbench.basictests.EnumTests$FooClass)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String getATest()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: de.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo getFooA()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String skipMe(int)\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String skipMe(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String skipMe(int)\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testLoop()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testLoop2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnum6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnumField()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnumField2()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnumSwitch()\u003e",
    "value": "A(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: java.lang.String testSimpleEnumSwitch()\u003e",
    "value": "B(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests: int x(de.fraunhofer.sit.sse.valbench.basictests.EnumTests$FooClass)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ComplexArrayTests: byte[] doStuff(byte[],byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ComplexArrayTests: byte[] gen(byte[],byte[][])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ComplexArrayTests: java.lang.String test()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.util.Dictionary createDict1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.util.Dictionary createDict2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.lang.String test()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.lang.String test2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.lang.String test3()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DictionaryTests: java.lang.String test4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Null: int hashCode()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String redirect()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String redirect2(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testArrayDoubleReflection()\u003e",
    "value": "(.*)_(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testNotExistingCall()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testNotExistingField()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testParamTypes()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflection()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionArrayCopy()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionBFieldAccessGetOtherTypes()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionConstructor()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionConstructorArgs()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionConstructorArgs2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionConstructorArgs3()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessGet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessGetOtherTypes()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessGetSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessGetUnused()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessSet()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionFieldAccessSetAll()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionInReflectionHard()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionInReflectionLoop()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionInReflectionLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionInReflectionLoop()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionModelStaticFieldAccessGet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testReflectionStaticFieldAccessGetSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testT()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionTests: java.lang.String testVoidCall()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidResourceTests: java.lang.String testResources()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ThreadTests: java.lang.String call()\u003e",
    "value": "(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ThreadTests: java.lang.String testThread()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAdd()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAdd()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAdd()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAnd()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAnd()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testAnd()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testDiv()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testDiv()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testDiv()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMod()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMod()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMod()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMul()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMul()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testMul()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testOr()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testOr()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testOr()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftLeft()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftLeft()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftLeft()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight2()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testShiftRight2()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testSub()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testSub()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testSub()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testXor()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testXor()\u003e",
    "value": "(.*)(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.ArithmeticTests: java.lang.String testXor()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_(.*)_"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callee2()\u003e",
    "value": "Hehehehe(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callee3()\u003e",
    "value": "Hehehehe(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callee4s()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callees()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callees()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callees()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String callees2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimpleStringTests: java.lang.String testStringBuilders()\u003e",
    "value": "Foo"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PropertiesTests: java.lang.String atestPropertiesLoad()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PropertiesTests: java.lang.String testProperties()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CallsTests: java.lang.Object arg(int,java.lang.Object[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CallsTests: java.lang.String simplestCallTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ApacheHex: java.lang.String testApacheHex()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ApacheHex: java.lang.String testApacheHexDecode()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ApacheHex: java.lang.String testApacheHexDecode2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ApacheHex: java.lang.String testApacheHexDecodeS()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootSignature(java.lang.reflect.Method)\u003e",
    "value": "\u003c(.*): (.*) (.*)((.*)(.*))\u003e"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootSignature(java.lang.reflect.Method)\u003e",
    "value": "\u003c(.*): (.*) (.*)()\u003e"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootSignature(java.lang.reflect.Method)\u003e",
    "value": "\u003c(.*): (.*) (.*)((.*))\u003e"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootSignature(java.lang.reflect.Method)\u003e",
    "value": "\u003c(.*): (.*) (.*)(,(.*))\u003e"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootSignature(java.lang.reflect.Method)\u003e",
    "value": "\u003c(.*): (.*) (.*)((.*),(.*))\u003e"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootType(java.lang.Class)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.SootUtils: java.lang.String getSootType(java.lang.Class)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo[] $values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo valueOf(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo: de.fraunhofer.sit.sse.valbench.basictests.EnumTests$Foo[] values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String code(java.lang.String)\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String test5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testAuthority1()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testAuthority2()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testAuthority3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testBar()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testBasr()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testBuildUponEncodedOpaqueUri1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testBuildUponEncodedOpaqueUri2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testBuildUponEncodedOpaqueUri3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEmptyPath()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEncodeDecode()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEncodeWithAllowedChars()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEquals()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEquals2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testEquals3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testFile()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testHC()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testHC2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testHierachical()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testNew()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testNotEquals()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testNotHierachical()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathOperations1()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathOperations2()\u003e",
    "value": "(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathOperations3()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathOperations4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathSegmentDecoding1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathSegmentDecoding2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testPathSegmentNum()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: int testPort()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQuery1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQuery2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQuery3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQuery4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQuery5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testSMS1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testSMS2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testSMS3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testSMS4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testScheme1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testScheme2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testScheme3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidURITests: java.lang.String testQueryParam()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite1()\u003e",
    "value": "aa"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite1()\u003e",
    "value": "bb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite1()\u003e",
    "value": "ab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite1()\u003e",
    "value": "ba"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite2()\u003e",
    "value": "aa"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite2()\u003e",
    "value": "bb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite2()\u003e",
    "value": "ab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite2()\u003e",
    "value": "ba"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite3()\u003e",
    "value": "aa"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite3()\u003e",
    "value": "bb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite3()\u003e",
    "value": "ab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CompositeTests: java.lang.String composite3()\u003e",
    "value": "ba"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests$MyArrayList: boolean add(java.lang.Object)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InheritanceLibraryTests: java.util.List createList()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InheritanceLibraryTests: java.lang.String testInheritance()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf10()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf11()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf12()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf13()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf7()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf8()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.InstanceOfTests: java.lang.String testInstanceOf9()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: byte[] getByteArray()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.io.InputStream getInputStream()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.io.Reader getReader()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test7()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.IOCommonsTests: java.lang.String test8()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FlowSensitivityTests: java.lang.String testFlowSensitivity()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur1: long hash(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur1: long hashAligned(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur1: java.lang.String testMurmur()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: int f(int,int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: int f(int,int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: int f(int,int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: int f(int,int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: int f(int,int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: byte[] getHash(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.RipeMD160: java.lang.String testRC4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long fmix32(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long fmix64(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long[] hash_x64_128(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long hash_x86_32(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long mixK1(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long mixK2(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: long rotl32(long,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: java.lang.String testMurmurX64()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur3: java.lang.String testMurmurX86()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests: java.lang.String testEnum()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests: java.lang.String testSimple()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests: java.lang.String testSimple2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests: java.lang.String testSimple3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.JSONTests: java.lang.String testSimple4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur2: long hash(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur2: long hash64(byte[],int,long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Murmur2: java.lang.String testMurmur()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Foo: int compareTo(java.lang.Object)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Foo: int compareTo(de.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Foo)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.HashCodeEqualsTests$Foo: int hashCode()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests: java.lang.Object get(int,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests: java.lang.String test()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests: java.lang.String testContextSensitivity()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testGetPath()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testGetPath()\u003e",
    "value": "(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testGetPath()\u003e",
    "value": "(.*)(.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testIsAbsolute()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testIsAbsolute()\u003e",
    "value": "(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testIsAbsolute()\u003e",
    "value": "(.*)(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent()\u003e",
    "value": "(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent()\u003e",
    "value": "(.*)(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent2()\u003e",
    "value": "(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testParent2()\u003e",
    "value": "(.*)(.*): (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testPathsFile()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testPathsFile()\u003e",
    "value": "(.*): (.*); (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.FileTests: java.lang.String testPathsFile()\u003e",
    "value": "(.*)(.*): (.*); (.*)\n"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: java.lang.String test()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: java.lang.String test2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: java.lang.String testCallee(de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$A)\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive: java.lang.String testCallee2(de.fraunhofer.sit.sse.valbench.modellingtests.ContextSensitive$I)\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidIntentTests: java.lang.String testIntent()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidIntentTests: java.lang.String testIntentCompositeValue()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotation()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotation2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationArray()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationArray2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationClass()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationDefault()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationEnum()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AnnotationTests: java.lang.String testSimpleAnnotationEnum2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.AdvancedStringTests: java.lang.String testSimpleString5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.AdvancedStringTests: java.lang.String testSimpleString6()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.AdvancedStringTests: java.lang.String testStringFormat()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testEquals()\u003e",
    "value": "x"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testEquals()\u003e",
    "value": "y"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testHashcode()\u003e",
    "value": "x"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testHashcode()\u003e",
    "value": "y"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testImpossibleIf2(java.lang.String)\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testImpossibleIfCondition()\u003e",
    "value": "True"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.IfTests: java.lang.String testPathSensitivity()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CalleeTests$Base: java.lang.String get()\u003e",
    "value": "BaseNULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testCompares()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testHex()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testHex()\u003e",
    "value": "(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testHex()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testURLs()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MiscTests: java.lang.String testVersionCode()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CryptoAPITests: java.lang.String test2()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.nio.ByteBuffer doSlice(java.nio.ByteBuffer)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testAllocate()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testSimple()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testSimple2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testSlice()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testSlice2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ByteBufferTests: java.lang.String testTypes()\u003e",
    "value": "(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PatternTest: java.lang.String testPattern()\u003e",
    "value": "Matches: (.*)\nGroup: (.*)\nGroup(0): (.*)\nStart: (.*)\nEnd: (.*)\nRegionStart: (.*)\nPattern: (.*)\nFlags: (.*)\nStart: (.*)\nStart(0): (.*)\nRep(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.PatternTest: java.lang.String testPattern2()\u003e",
    "value": "replaceAll: (.*)\nreplaceFirst:(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: boolean access$000(de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: java.lang.String access$100(de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory)\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: java.lang.Class access$200(de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: java.util.Map access$300(de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory of(java.lang.Class)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String,boolean)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory recognizeSubtypes()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory: de.fraunhofer.sit.sse.valbench.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.RecursiveTests: int fibonacci(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.RecursiveTests: java.lang.String findRecursion()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String test()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testChar()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testCtor()\u003e",
    "value": "A"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testDouble()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testIf()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testInt()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testSimpleString()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testSimpleString2()\u003e",
    "value": "Fop"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testSimpleString3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.BasicStringTests: java.lang.String testSimpleString4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum: de.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum[] $values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum: de.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum valueOf(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum: de.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests$TestEnum[] values()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String arraysTest()\u003e",
    "value": "(.*)(.*)-(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String getIterable(java.lang.Iterable)\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String getIterable(java.lang.Iterable)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String getIterable(java.lang.Iterable)\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String iteratorTest()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String iteratorTest()\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String iteratorTest()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String listTest()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String listTest2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String ownImpl()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String setTest()\u003e",
    "value": "(.*)(.*)-(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleBreakListTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleBreakListTest2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleBreakListTest3()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleIterableTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleListTest2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simpleListTest3()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simplestLinkedHashSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: int simplestListTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simplestStackTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simplestTreeSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simplestTreeSet2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String simplestVectorTest()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String testList()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.CollectionTests: java.lang.String testSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint$ExpectedResult: java.lang.StackTraceElement getTop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint$ExpectedResult: java.lang.String getClassName()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint$ExpectedResult: int getLineNumber()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint$ExpectedResult: java.lang.String getMethodName()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.ExplicitLoggingPoint$ExpectedResult: java.lang.String toString()\u003e",
    "value": "Location: (.*): (.*):(.*); Expected: (.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "yzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "xyzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "zb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "xyzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "yzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough3()\u003e",
    "value": "zab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testFallthrough4()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough()\u003e",
    "value": "a"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough()\u003e",
    "value": "(.*)a"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough2()\u003e",
    "value": "ab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough2()\u003e",
    "value": "b"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough2()\u003e",
    "value": "(.*)b"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough2()\u003e",
    "value": "(.*)ab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "yzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)yzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)xyzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "zb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "xyzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)zab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)zb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "xyzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)yzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "yzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "zab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testLoopFallthrough3()\u003e",
    "value": "(.*)xyzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testStringSwitch()\u003e",
    "value": "No"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testStringSwitch()\u003e",
    "value": "No_Yes"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "yzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "xyzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "zb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "xyzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "yzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch()\u003e",
    "value": "zab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "yzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "xyzb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "zb"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "xyzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "yzab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.SwitchTests: java.lang.String testSwitch2()\u003e",
    "value": "zab"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int bigSig0(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int bigSig1(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int ch(int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: byte[] hash(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int maj(int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: byte[] pad(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int smallSig0(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int smallSig1(int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: java.lang.String testSHA256()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: byte[] toByteArray(int[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.SHA256: int[] toIntArray(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.ReflectionArrayTests: java.lang.String testReflectionArray()\u003e",
    "value": "(.*)(.*)(.*)(.*)(.*)_(.*)(.*)(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CharacterTests: java.lang.String testSimpleChars()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CharacterTests: java.lang.String testSimpleStringCharArray()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String stringTest()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String test()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String test2()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String test3()\u003e",
    "value": "Test"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String testValueOf1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.StringTests: java.lang.String testValueOf2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.CallerTests: java.lang.String test()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String setToString(java.util.Set)\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test10()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test5()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test6()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test7()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test8_0()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test8_1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test8_2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.EnumSetTests: java.lang.String test9()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.MultiArrayTests: java.lang.String testEmpty()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.MultiArrayTests: java.lang.String testSimple()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.MultiArrayTests: java.lang.String testSimple2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.PolymorphicTests$Base: java.lang.String get()\u003e",
    "value": "BaseNULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Whirlpool: java.lang.String display(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Whirlpool: java.lang.String testWhirlpool()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish$BlowfishECB: long decryptBlock(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish$BlowfishECB: long encryptBlock(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.DynamicInvokeTests: java.lang.String doSth()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[][] AddRoundKey(byte[][],byte[][],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte FFMul(byte,byte)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[][] SubBytes(byte[][])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] SubWord(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] decrypt(byte[],byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] decrypt(byte[],byte[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] decryptBloc(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] deletePadding(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] encrypt(byte[],byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] encrypt(byte[],byte[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] encryptBloc(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[][] generateSubkeys(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] keygeneration()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] rotateWord(byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: java.lang.String runAES()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.AES: byte[] xor_func(byte[],byte[])\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: de.fraunhofer.sit.sse.valbench.basictests.AliasTests$ObjHolder create()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String stest2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String stest3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "Part 1(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "(.*)(.*)(.*)Aliased"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "Part 1(.*)(.*)Aliased"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "Part 1(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String test1(byte[])\u003e",
    "value": "Part 1(.*)Aliased"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String testAlias1()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String testAlias2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String testAlias3()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String testAlias4()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.AliasTests: java.lang.String testFieldAlias()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String complicatedFieldTest()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String complicatedFieldTest2()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String fieldSensitivityTest()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String findFields()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String objectSensitivityTest()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testArrayField()\u003e",
    "value": "NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testArrayInLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testArrayLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldAlias()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldAlias2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldInLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldInLoop2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldLoop()\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testFieldLoop()\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: byte testFieldLoop2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testImmutableInLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testImmutableLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testLoopCopy()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testMultiLoop()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testOverwrite()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testSimple()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: java.lang.String testStaticFields()\u003e",
    "value": "(.*)_ (.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: int useField()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.FieldTests: byte useField2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: int access$000(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: int access$100(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long access$200(int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long access$300(byte[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long access$500(int[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: int binHexToBytes(java.lang.String,byte[],int,int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long byteArrayToLong(byte[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String byteArrayToUNCString(byte[],int,int)\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String bytesToBinHex(byte[],int,int)\u003e",
    "value": ""
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String encStr(java.lang.String,long)\u003e",
    "value": "(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long intArrayToLong(int[],int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: int longHi32(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: int longLo32(long)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: long makeLong(int,int)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String test()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String decryptString(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.crypto.Blowfish: java.lang.String encryptString(java.lang.String)\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.SimplestTests: java.lang.String simplestTreeSet()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testAShr()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testAdd()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testBitwiseAnd()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testBitwiseXor()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testDiv()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testLogicalXor()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testMul()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testRem()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testShiftL()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testShr()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.basictests.TestBitwise: java.lang.String testSubtract()\u003e",
    "value": "(.*)_(.*)_(.*)_(.*)_(.*)_(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidTests: java.lang.String simpleAndroidSparseArrayTest()\u003e",
    "value": "(.*)(.*)(.*)(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidTests: java.lang.String simpleLoopTestField()\u003e",
    "value": "NULL-CONSTANT_NULL-CONSTANT"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidTests: java.lang.String testPair()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidTests: java.lang.String testPairOverwrite()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.android.AndroidTests: java.lang.String testPairWithReflection()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MathTests: java.lang.String testNumericCasts()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MathTests: java.lang.String testSimpleMath()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MathTests: java.lang.String testSimpleMath2()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MathTests: java.lang.String testSimpleMathDouble()\u003e",
    "value": "(.*)"
  },
  {
    "method": "\u003cde.fraunhofer.sit.sse.valbench.modellingtests.MathTests: java.lang.String testSimpleMathFloat()\u003e",
    "value": "(.*)"
  }
]